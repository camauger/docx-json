---
description: 
globs: 
alwaysApply: true
---
## üß≠ **PLAN DE TRAVAIL GLOBAL**

### üéØ Objectif :
Cr√©er un script Python ex√©cutable en ligne de commande pour convertir un fichier `.docx` en :
- un fichier `.json` d√©taill√© repr√©sentant sa structure,
- un fichier `.html` lisible et stylis√©, en option.

---

## **√âTAPES DU D√âVELOPPEMENT**

---

### **1. Pr√©parer l‚Äôenvironnement**

#### üì¶ D√©pendances :
Installer les biblioth√®ques n√©cessaires :
```bash
pip install python-docx
```

Optionnel (selon √©volutions futures) :
```bash
pip install beautifulsoup4 html5lib
```

#### üìÅ Structure du projet :
```
docx_to_json/
‚îú‚îÄ‚îÄ convert.py        # Le script principal
‚îú‚îÄ‚îÄ test.docx         # Exemple de fichier d'entr√©e
```

---

### **2. Lire le fichier `.docx`**

#### ‚û§ Ouvrir le document :
Utiliser `Document()` de `python-docx` pour charger le document :
```python
from docx import Document
document = Document("fichier.docx")
```

---

### **3. Parcourir les √©l√©ments du corps du document**

#### ‚û§ Deux types principaux √† g√©rer :
- `paragraphs`
- `tables`

#### ‚û§ Extraction avec l‚Äôordre original :
On parcourt les √©l√©ments XML (`document.element.body`) pour r√©cup√©rer l‚Äôordre r√©el d‚Äôapparition (`<w:p>` et `<w:tbl>`).

---

### **4. Traiter les paragraphes**

Pour chaque paragraphe :
- d√©tecter le **style** (ex: "Heading 1", "Normal"),
- regrouper les **runs** de texte,
- noter les **styles** (gras, italique, soulign√©),
- d√©tecter les **listes** (num√©rot√©es ou √† puces),
- convertir en JSON avec les bons types : `paragraph`, `heading`, `list_item`.

---

### **5. Traiter les tableaux**

Pour chaque table :
- parcourir les lignes et cellules,
- extraire le texte de chaque cellule (parfois multi-paragraphes),
- construire une structure JSON du type :
```json
{ "type": "table", "rows": [["A1", "B1"], ["A2", "B2"]] }
```

---

### **6. Traiter les images**

- Acc√©der √† `document.part._rels` pour retrouver les images int√©gr√©es.
- Extraire les blobs binaires.
- Convertir en base64 et enregistrer dans un dictionnaire `{nom_fichier: base64}`.
- Optionnel : int√©grer les images dans le HTML avec un tag `<img>`.

---

### **7. G√©n√©rer le JSON final**

Assembler :
```json
{
  "meta": { "title": "nom_du_fichier" },
  "content": [...],
  "images": { "image1.png": "base64..." }
}
```
Sauvegarder dans un fichier `.json` avec `json.dump(...)`.

---

### **8. G√©n√©rer le HTML (optionnel)**

#### ‚û§ √Ä partir du JSON :
Cr√©er un fichier HTML propre :
- `<h1>` √† `<h6>` pour les titres,
- `<p>` avec `<strong>`, `<em>`, `<u>` pour les paragraphes stylis√©s,
- `<ul>` ou `<ol>` si besoin pour les listes,
- `<table>` pour les tableaux,
- `<img src="data:image/png;base64,...">` pour les images.

#### ‚û§ Sauvegarde :
Nommer le fichier `.html` et l‚Äô√©crire avec `open(..., "w", encoding="utf-8")`.

---

### **9. Ajouter les options CLI**

#### ‚û§ Interface ligne de commande :
- `sys.argv[1]` ‚Üí fichier `.docx`
- `--json` ‚Üí activer la sortie JSON
- `--html` ‚Üí activer la sortie HTML

Valider les arguments et afficher un message d‚Äôusage en cas d‚Äôerreur.

---

### **10. Tests & validation**

- Utiliser plusieurs `.docx` de test : avec titres, paragraphes, listes, tableaux, images.
- V√©rifier que le JSON est bien form√© et complet.
- V√©rifier que le HTML est lisible, structur√©, et que les images s‚Äôaffichent.

---

## üìú INSTRUCTIONS POUR LE D√âVELOPPEUR

1. Cr√©er un nouveau projet Python avec le fichier `convert.py`.
2. Installer `python-docx`.
3. Impl√©menter les fonctions suivantes :
   - `extract_images()`
   - `get_paragraph_json()`
   - `get_table_json()`
   - `get_document_json()`
   - `generate_html()`
4. G√©rer les arguments CLI avec `sys.argv`.
5. Testez avec plusieurs `.docx` vari√©s.
6. Ajouter du logging ou des `print()` pour d√©boguer facilement.
7. Documenter chaque fonction.
8. Optionnel : ajouter une gestion des erreurs (fichier introuvable, mauvaise extension, etc.)

---
Suivre les instructions de [README.md](mdc:README.md)
Suivre les bonnes pratiques √©tablies dans @python-r[python-rules.mdc](mdc:.cursor/rules/python-rules.mdc), [python-classes-rule.mdc](mdc:.cursor/rules/python-classes-rule.mdc), [python-decorators.mdc](mdc:.cursor/rules/python-decorators.mdc) et [python-tips.mdc](mdc:.cursor/rules/python-tips.mdc)
